services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - S3_MODEL_PATH=${S3_MODEL_PATH}
      - S3_MODELS_BUCKET=${S3_MODELS_BUCKET}
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=rpc://
    networks:
      - graildient-network

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=graildient_stats
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - graildient-network

  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.celery
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - S3_MODEL_PATH=${S3_MODEL_PATH}
      - S3_MODELS_BUCKET=${S3_MODELS_BUCKET}
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=rpc://
    command: celery -A celery_tasks.worker worker --loglevel=info --concurrency=2
    networks:
      - graildient-network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672" # AMQP protocol port
      - "15672:15672" # Management console port
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - graildient-network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

volumes:
  postgres_data:
  rabbitmq_data:

networks:
  graildient-network:
    driver: bridge
